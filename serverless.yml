service: gettogether

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

package:
  exclude:
    - WebAuth/**
    - data/**
    - .github/**
    - tests/**

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName: ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}
  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-notifyOrganiserDLQ
  notifyOrganiserDLQSnsTopic: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}
  
functions:
  getGetTogethers:
    handler: src/functions/getGetTogethers.handler
    events:
      - http:
          path: api/getGetTogethers
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt GetTogethersTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*
    environment:
      getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName
  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    # onError: !Ref NotifyOrganiserDLQSnsTopic
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref NotifyOrganiserDLQSnsTopic
      - Effect: Allow
        Action: lambda:InvokeFunction
        Resource: !GetAtt DestinationOKLambdaFunction.Arn
      - Effect: Allow
        Action: lambda:InvokeFunction
        Resource: !GetAtt DestinationKOLambdaFunction.Arn
    destinations:
      onSuccess: destinationOK
      onFailure: destinationKO
  notifyOrganiserDLQ:
    handler: src/functions/notifyOrganiserDLQ.handler
    events:
      - sns: 
          arn: !Ref NotifyOrganiserDLQSnsTopic
          topicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopicArn}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopicArn}
      
  cognitoPublic:
    handler: src/functions/cognitoPublic.handler
    events:
      - http:
          path: api/cognitoPublic
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(schema.json)}
              
  iamPublic:
    handler: src/functions/iamPublic.handler
    events:
      - http:
          path: api/iamPublic
          method: get
    environment:
      privateApi: https://tihgps0zh8.execute-api.eu-west-1.amazonaws.com/dev/api/iamPrivate
    iamRoleStatements:
    - Effect: Allow
      Action: execute-api:Invoke      
      Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/api/iamPrivate
  iamPrivate:
    handler: src/functions/iamPrivate.handler
    events:
      - http:
          path: api/iamPrivate
          method: get
          authorizer: aws_iam
  destinationOK:
    handler: src/functions/destinationOK.handler
  destinationKO:
    handler: src/functions/destinationKO.handler

resources:
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    NotifyOrganiserDLQSnsTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
    GatewayResponseBadRequest:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: BAD_REQUEST_BODY
        "StatusCode" : "422"
        ResponseTemplates:
          application/json: "{\"message\": \"$context.error.message\", \"error\": \"$context.error.validationErrorString\"}"
        