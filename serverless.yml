service: gettogether

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName: ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}
  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-notifyOrganiserDLQ
  notifyOrganiserDLQSnsTopic: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}

functions:
  getGetTogethers:
    handler: src/functions/getGetTogethers.handler
    events:
      - http:
          path: api/getGetTogethers
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt GetTogethersTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*
    environment:
      getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName
  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    onError: !Ref NotifyOrganiserDLQSnsTopic
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref NotifyOrganiserDLQSnsTopic
  notifyOrganiserDLQ:
    handler: src/functions/notifyOrganiserDLQ.handler
    events:
      - sns: 
          arn: !Ref NotifyOrganiserDLQSnsTopic
          topicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopicArn}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopicArn}

  ReadFromSNS:
    handler: src/functions/readFromSNS.handler
    events:
      - sns:
          arn: !Ref SNSNotifier
          topicName: SNSNotifier

  ReadFromDLQ:
    handler: src/functions/readFromDLQ.handler
    events:
      - sqs:
          batchSize: 1
          arn: !GetAtt NotifierDLQ.Arn

resources:
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    NotifyOrganiserDLQSnsTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: ${self:custom.notifyOrganiserDLQSnsTopicName}

    NotifierDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-NotifierDLQ
        
    NotifierDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          {
            "Version": "2012-10-17",
            "Id": "NotifierDLQPolicy",
            "Statement": [{
              "Sid":"NotifierDLQPolicy001",
              "Effect":"Allow",
              "Principal":"*",
              "Action":"sqs:SendMessage",
              "Resource":!Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}-NotifierDLQ",
              "Condition":{
                "ArnEquals":{
                  "aws:SourceArn":!Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}-SNSNotifier"
                }
              }
            }]
          }      
        Queues:
          - !Ref NotifierDLQ

    SNSNotifier:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-SNSNotifier
        TopicName: ${self:service}-${self:provider.stage}-SNSNotifier

    LambdaInvokePermissionFromSNS:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn: !Ref SNSNotifier
        FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-ReadFromSNS
      DependsOn: ReadFromSNSLambdaFunction

    NotifierSubscription:
      Type: AWS::SNS::Subscription
      Properties: 
        Endpoint: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-ReadFromSNS-badOne
        Protocol: lambda
        TopicArn: !Ref SNSNotifier
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt NotifierDLQ.Arn