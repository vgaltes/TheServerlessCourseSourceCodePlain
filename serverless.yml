service: gettogether
useDotenv: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-lumigo

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName: ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}
  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-notifyOrganiserDLQ
  notifyOrganiserDLQSnsTopic: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}
  lumigo:
    token: ${env:LUMIGO_TOKEN}

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}
  logs:
    restApi:
      accessLogging: true
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      executionLogging: false # Turn off execution logs b/c they're too noisy.
      # https://www.alexdebrie.com/posts/api-gateway-access-logs/#serverless-framework

functions:
  getGetTogethers:
    handler: src/functions/getGetTogethers.handler
    events:
      - http:
          path: api/getGetTogethers
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt GetTogethersTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*
    environment:
      getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName
  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    onError: !Ref NotifyOrganiserDLQSnsTopic
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref NotifyOrganiserDLQSnsTopic
  notifyOrganiserDLQ:
    handler: src/functions/notifyOrganiserDLQ.handler
    events:
      - sns: 
          arn: !Ref NotifyOrganiserDLQSnsTopic
          topicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopicArn}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopicArn}
  cognitoPublic:
    handler: src/functions/cognitoPublic.handler
    events:
      - http:
          path: api/cognitoPublic
          method: get
          cors: true
  cognitoPrivate:
    handler: src/functions/cognitoPrivate.handler
    events:
      - http:
          path: api/cognitoPrivate
          method: get
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
        
  iamPublic:
    handler: src/functions/iamPublic.handler
    events:
      - http:
          path: api/iamPublic
          method: get
    environment:
      privateApi: https://tihgps0zh8.execute-api.eu-west-1.amazonaws.com/dev/api/iamPrivate
    iamRoleStatements:
    - Effect: Allow
      Action: execute-api:Invoke      
      Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/api/iamPrivate
  iamPrivate:
    handler: src/functions/iamPrivate.handler
    events:
      - http:
          path: api/iamPrivate
          method: get
          authorizer: aws_iam

resources:
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    NotifyOrganiserDLQSnsTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
        
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-testauthsls-user-pool
        # Allow email addresses to be used as username
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-testauthsls-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
