service: gettogether

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName: ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}
  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-notifyOrganiserDLQ
  notifyOrganiserDLQSnsTopic: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}
  notifications:
    - protocol: email
      endpoint: "vgaltes@gmail.com"
  alerts:
    dashboards: true

    topics:
      ok:
        topic: ${self:service}-${self:provider.stage}-alerts-ok
        notifications: ${self:custom.notifications}
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications: ${self:custom.notifications}
      insufficientData:
        topic: ${self:service}-${self:provider.stage}-alerts-insufficientData
        notifications: ${self:custom.notifications}

    definitions:
      functionDurationP95:
        namespace: 'AWS/Lambda'
        metric: Duration
        threshold: 100
        statistic: 'p95'
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanThreshold
        treatMissingData: missing

    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
      - functionDurationP95

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}
  tracing:
    lambda: true
    apiGateway: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  httpApi:
    authorizers:
      auth0JwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://vgaltes.eu.auth0.com/
        audience:
          - https://tihgps0zh8.execute-api.eu-west-1.amazonaws.com/dev/api/

functions:
  auth:
    handler: src/functions/auth0CustomAuthorizer.handler
    environment:
      AUDIENCE: https://tihgps0zh8.execute-api.eu-west-1.amazonaws.com/dev/api/
      TOKEN_ISSUER: https://vgaltes.eu.auth0.com/
      JWKS_URI: https://vgaltes.eu.auth0.com/.well-known/jwks.json
  getGetTogethers:
    handler: src/functions/getGetTogethers.handler
    events:
      - http:
          path: api/getGetTogethers
          method: get
          authorizer: auth
      - httpApi:
          path: /httpApi/getTogethers
          method: get
          authorizer:
            name: auth0JwtAuthorizer
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt GetTogethersTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*
    environment:
      getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName
      

  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    onError: !Ref NotifyOrganiserDLQSnsTopic
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref NotifyOrganiserDLQSnsTopic
  notifyOrganiserDLQ:
    handler: src/functions/notifyOrganiserDLQ.handler
    events:
      - sns: 
          arn: !Ref NotifyOrganiserDLQSnsTopic
          topicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopicArn}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopicArn}

resources:
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    NotifyOrganiserDLQSnsTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: ${self:custom.notifyOrganiserDLQSnsTopicName}